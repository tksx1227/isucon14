user www-data;
worker_processes 10; # TODO: コア数の5倍の値を指定する

worker_rlimit_nofile 65536;

error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

events {
    worker_connections 2048;
    multi_accept on; # NOTE: 基本offでいい, 短時間のリクエストを一度に大量に捌きたいケースでonにする
}

http {
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;
	types_hash_max_size 2048;

    log_format main escape=json '{"time":"$time_local",'
                                '"host":"$remote_addr",'
                                '"forwardedfor":"$http_x_forwarded_for",'
                                '"req":"$request",'
                                '"status":"$status",'
                                '"method":"$request_method",'
                                '"uri":"$request_uri",'
                                '"body_bytes":$body_bytes_sent,'
                                '"referer":"$http_referer",'
                                '"ua":"$http_user_agent",'
                                '"request_time":$request_time,'
                                '"cache":"$upstream_http_x_cache",'
                                '"runtime":"$upstream_http_x_runtime",'
                                '"response_time":"$upstream_response_time",'
                                '"vhost":"$host",'
                                '"proxy_host":"$upstream_addr"}';

    access_log /var/log/nginx/access.log main;

    # MIMEタイプを読み込む
    include /etc/nginx/mime.types;

    # Reference: https://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream
    upstream backend {
        server 127.0.0.1:8080 weight=1 max_fails=3 fail_timeout=30; # TODO: 各種値は本番の環境を見て調整

        # keep-alive設定
        keepalive 10; # NOTE: [調整検討] 1ワーカーが各serverに対して保持できる最大接続数
        keepalive_requests 500; # NOTE: [調整検討] 1つの接続で処理できる最大リクエスト数
        keepalive_timeout 30s; # NOTE: [調整検討] upstreamへのkeep-aliveが開いたままになるタイムアウト
    }

    # bot避けのためのvhost
    server {
        listen 443 ssl default_server;
        server_name _;
        index index.html index.htm index.nginx-debian.html;
        root /var/www/html;

        # bot避けのためのvhostで、この証明書は自己署名です
        ssl_certificate     /etc/nginx/tls/dummy.crt;
        ssl_certificate_key /etc/nginx/tls/dummy.key;
        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers off;

        location / {
            try_files $uri $uri/ =404;
        }
    }

    # アプリケーション用メインサーバー
    server {
        root /home/isucon/webapp/public/;
        # listen 80 default_server;
        # listen [::]:80 default_server;

        # TLSの設定
        listen 443 ssl http2;
        server_name xiv.isucon.net;
        server_name *.xiv.isucon.net;

        ssl_certificate     /etc/nginx/tls/_.xiv.isucon.net.crt;
        ssl_certificate_key /etc/nginx/tls/_.xiv.isucon.net.key;

        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers off;

        # access_log off; # TODO: 制限時間終了前にコメントを外す

        index index.html;

        # 圧縮設定
        gzip on; # NOTE: 圧縮にCPUを使用するためパフォーマンスへの影響は要観察, gzip_staticも検討
        gzip_types *; # NOTE: 特に絞る理由もないため全てのMIMEタイプを設定
        gzip_comp_level 1; # NOTE: level 1, 9でそこまで圧縮率が変わらなかったため1に設定
        gzip_min_length 1000; # NOTE: 小さすぎると恩恵が小さいのでこれくらいに設定
        gzip_http_version 1.0;

        # keep-alive設定
        keepalive_requests 300; # NOTE: 調整検討
        keepalive_timeout 15s; # NOTE: 調整検討

        location / {
            try_files $uri /index.html;
        }

        # APIへのリクエストはロードバランシングする
        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host; # リクエスト時のHostヘッダを伝搬させる
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # NOTE: upstreamに対してkeep-aliveを設定するために必要
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location /api/internal/ {
            # localhostからのみアクセスを許可
            allow 127.0.0.1;
            deny all;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # NOTE: upstreamに対してkeep-aliveを設定するために必要
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # initializeへのリクエストはupstreamで処理する
        location /initialize {
            proxy_pass http://backend;
        }

        # staticデータはキャッシュを有効化する
        location ~* \.(html|htm|js|css|gif|jpg|jpeg|png|ico|svg)$ {
            root /home/isucon/webapp/public/;

            etag on;
            add_header Cache-Control 'max-age=300, private'; # 5mローカルキャッシュ有効にする
            sendfile on;
            tcp_nopush on;
        }
    }

    # status用のサーバー
    server {
        server_name localhost;
        keepalive_timeout 0;
        access_log off;

        # NOTE: allow, denyは上にあるものが優先される
        allow 127.0.0.1;
        deny all;

        location /status {
            stub_status;
        }
    }
}
